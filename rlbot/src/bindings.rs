/* automatically generated by rust-bindgen */

pub const CONST_MAX_MESSAGE_SIZE: u32 = 4096;
pub const CONST_GAME_INPUT_SIZE: u32 = 65536;
pub const CONST_RENDER_INPUT_SIZE: u32 = 327680;
pub const CONST_CALLBACK_INPUT_SIZE: u32 = 65536;
pub const CONST_MaxBoosts: u32 = 50;
pub const CONST_MaxPlayers: u32 = 10;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ScoreInfo {
    pub Score: ::std::os::raw::c_int,
    pub Goals: ::std::os::raw::c_int,
    pub OwnGoals: ::std::os::raw::c_int,
    pub Assists: ::std::os::raw::c_int,
    pub Saves: ::std::os::raw::c_int,
    pub Shots: ::std::os::raw::c_int,
    pub Demolitions: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ScoreInfo() {
    assert_eq!(
        ::std::mem::size_of::<ScoreInfo>(),
        28usize,
        concat!("Size of: ", stringify!(ScoreInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<ScoreInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(ScoreInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScoreInfo>())).Score as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ScoreInfo),
            "::",
            stringify!(Score)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScoreInfo>())).Goals as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ScoreInfo),
            "::",
            stringify!(Goals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScoreInfo>())).OwnGoals as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ScoreInfo),
            "::",
            stringify!(OwnGoals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScoreInfo>())).Assists as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ScoreInfo),
            "::",
            stringify!(Assists)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScoreInfo>())).Saves as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ScoreInfo),
            "::",
            stringify!(Saves)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScoreInfo>())).Shots as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ScoreInfo),
            "::",
            stringify!(Shots)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ScoreInfo>())).Demolitions as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ScoreInfo),
            "::",
            stringify!(Demolitions)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyStruct_Vector3 {
    pub X: f32,
    pub Y: f32,
    pub Z: f32,
}
#[test]
fn bindgen_test_layout_PyStruct_Vector3() {
    assert_eq!(
        ::std::mem::size_of::<PyStruct_Vector3>(),
        12usize,
        concat!("Size of: ", stringify!(PyStruct_Vector3))
    );
    assert_eq!(
        ::std::mem::align_of::<PyStruct_Vector3>(),
        4usize,
        concat!("Alignment of ", stringify!(PyStruct_Vector3))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyStruct_Vector3>())).X as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyStruct_Vector3),
            "::",
            stringify!(X)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyStruct_Vector3>())).Y as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PyStruct_Vector3),
            "::",
            stringify!(Y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyStruct_Vector3>())).Z as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyStruct_Vector3),
            "::",
            stringify!(Z)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyStruct_Rotator {
    pub Pitch: f32,
    pub Yaw: f32,
    pub Roll: f32,
}
#[test]
fn bindgen_test_layout_PyStruct_Rotator() {
    assert_eq!(
        ::std::mem::size_of::<PyStruct_Rotator>(),
        12usize,
        concat!("Size of: ", stringify!(PyStruct_Rotator))
    );
    assert_eq!(
        ::std::mem::align_of::<PyStruct_Rotator>(),
        4usize,
        concat!("Alignment of ", stringify!(PyStruct_Rotator))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyStruct_Rotator>())).Pitch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyStruct_Rotator),
            "::",
            stringify!(Pitch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyStruct_Rotator>())).Yaw as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PyStruct_Rotator),
            "::",
            stringify!(Yaw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyStruct_Rotator>())).Roll as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyStruct_Rotator),
            "::",
            stringify!(Roll)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyStruct_Color {
    pub B: ::std::os::raw::c_uchar,
    pub G: ::std::os::raw::c_uchar,
    pub R: ::std::os::raw::c_uchar,
    pub A: ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_PyStruct_Color() {
    assert_eq!(
        ::std::mem::size_of::<PyStruct_Color>(),
        4usize,
        concat!("Size of: ", stringify!(PyStruct_Color))
    );
    assert_eq!(
        ::std::mem::align_of::<PyStruct_Color>(),
        1usize,
        concat!("Alignment of ", stringify!(PyStruct_Color))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyStruct_Color>())).B as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyStruct_Color),
            "::",
            stringify!(B)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyStruct_Color>())).G as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(PyStruct_Color),
            "::",
            stringify!(G)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyStruct_Color>())).R as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(PyStruct_Color),
            "::",
            stringify!(R)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyStruct_Color>())).A as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(PyStruct_Color),
            "::",
            stringify!(A)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Physics {
    pub Location: PyStruct_Vector3,
    pub Rotation: PyStruct_Rotator,
    pub Velocity: PyStruct_Vector3,
    pub AngularVelocity: PyStruct_Vector3,
}
#[test]
fn bindgen_test_layout_Physics() {
    assert_eq!(
        ::std::mem::size_of::<Physics>(),
        48usize,
        concat!("Size of: ", stringify!(Physics))
    );
    assert_eq!(
        ::std::mem::align_of::<Physics>(),
        4usize,
        concat!("Alignment of ", stringify!(Physics))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Physics>())).Location as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Physics),
            "::",
            stringify!(Location)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Physics>())).Rotation as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Physics),
            "::",
            stringify!(Rotation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Physics>())).Velocity as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Physics),
            "::",
            stringify!(Velocity)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Physics>())).AngularVelocity as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Physics),
            "::",
            stringify!(AngularVelocity)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PlayerInfo {
    pub Physics: Physics,
    pub Score: ScoreInfo,
    pub Demolished: bool,
    pub OnGround: bool,
    pub SuperSonic: bool,
    pub Bot: bool,
    pub Jumped: bool,
    pub DoubleJumped: bool,
    pub Name: [u16; 32usize],
    pub Team: ::std::os::raw::c_uchar,
    pub Boost: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_PlayerInfo() {
    assert_eq!(
        ::std::mem::size_of::<PlayerInfo>(),
        220usize,
        concat!("Size of: ", stringify!(PlayerInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<PlayerInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(PlayerInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlayerInfo>())).Physics as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PlayerInfo),
            "::",
            stringify!(Physics)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlayerInfo>())).Score as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PlayerInfo),
            "::",
            stringify!(Score)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlayerInfo>())).Demolished as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(PlayerInfo),
            "::",
            stringify!(Demolished)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlayerInfo>())).OnGround as *const _ as usize },
        77usize,
        concat!(
            "Offset of field: ",
            stringify!(PlayerInfo),
            "::",
            stringify!(OnGround)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlayerInfo>())).SuperSonic as *const _ as usize },
        78usize,
        concat!(
            "Offset of field: ",
            stringify!(PlayerInfo),
            "::",
            stringify!(SuperSonic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlayerInfo>())).Bot as *const _ as usize },
        79usize,
        concat!(
            "Offset of field: ",
            stringify!(PlayerInfo),
            "::",
            stringify!(Bot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlayerInfo>())).Jumped as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(PlayerInfo),
            "::",
            stringify!(Jumped)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlayerInfo>())).DoubleJumped as *const _ as usize },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(PlayerInfo),
            "::",
            stringify!(DoubleJumped)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlayerInfo>())).Name as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(PlayerInfo),
            "::",
            stringify!(Name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlayerInfo>())).Team as *const _ as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(PlayerInfo),
            "::",
            stringify!(Team)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlayerInfo>())).Boost as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(PlayerInfo),
            "::",
            stringify!(Boost)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BoostInfo {
    pub Active: bool,
    pub Timer: f32,
}
#[test]
fn bindgen_test_layout_BoostInfo() {
    assert_eq!(
        ::std::mem::size_of::<BoostInfo>(),
        8usize,
        concat!("Size of: ", stringify!(BoostInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<BoostInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(BoostInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BoostInfo>())).Active as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BoostInfo),
            "::",
            stringify!(Active)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BoostInfo>())).Timer as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(BoostInfo),
            "::",
            stringify!(Timer)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Touch {
    pub PlayerName: [u16; 32usize],
    pub TimeSeconds: f32,
    pub HitLocation: PyStruct_Vector3,
    pub HitNormal: PyStruct_Vector3,
}
#[test]
fn bindgen_test_layout_Touch() {
    assert_eq!(
        ::std::mem::size_of::<Touch>(),
        156usize,
        concat!("Size of: ", stringify!(Touch))
    );
    assert_eq!(
        ::std::mem::align_of::<Touch>(),
        4usize,
        concat!("Alignment of ", stringify!(Touch))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Touch>())).PlayerName as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Touch),
            "::",
            stringify!(PlayerName)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Touch>())).TimeSeconds as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(Touch),
            "::",
            stringify!(TimeSeconds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Touch>())).HitLocation as *const _ as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(Touch),
            "::",
            stringify!(HitLocation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Touch>())).HitNormal as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(Touch),
            "::",
            stringify!(HitNormal)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BallInfo {
    pub Physics: Physics,
    pub LatestTouch: Touch,
}
#[test]
fn bindgen_test_layout_BallInfo() {
    assert_eq!(
        ::std::mem::size_of::<BallInfo>(),
        204usize,
        concat!("Size of: ", stringify!(BallInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<BallInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(BallInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BallInfo>())).Physics as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BallInfo),
            "::",
            stringify!(Physics)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BallInfo>())).LatestTouch as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(BallInfo),
            "::",
            stringify!(LatestTouch)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GameInfo {
    pub TimeSeconds: f32,
    pub GameTimeRemaining: f32,
    pub OverTime: bool,
    pub UnlimitedTime: bool,
    pub RoundActive: bool,
    pub KickoffPause: bool,
    pub MatchEnded: bool,
}
#[test]
fn bindgen_test_layout_GameInfo() {
    assert_eq!(
        ::std::mem::size_of::<GameInfo>(),
        16usize,
        concat!("Size of: ", stringify!(GameInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<GameInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(GameInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameInfo>())).TimeSeconds as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GameInfo),
            "::",
            stringify!(TimeSeconds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameInfo>())).GameTimeRemaining as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GameInfo),
            "::",
            stringify!(GameTimeRemaining)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameInfo>())).OverTime as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GameInfo),
            "::",
            stringify!(OverTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameInfo>())).UnlimitedTime as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(GameInfo),
            "::",
            stringify!(UnlimitedTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameInfo>())).RoundActive as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(GameInfo),
            "::",
            stringify!(RoundActive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameInfo>())).KickoffPause as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(GameInfo),
            "::",
            stringify!(KickoffPause)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GameInfo>())).MatchEnded as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(GameInfo),
            "::",
            stringify!(MatchEnded)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LiveDataPacket {
    pub GameCars: [PlayerInfo; 10usize],
    pub NumCars: ::std::os::raw::c_int,
    pub GameBoosts: [BoostInfo; 50usize],
    pub NumBoosts: ::std::os::raw::c_int,
    pub GameBall: BallInfo,
    pub GameInfo: GameInfo,
}
#[test]
fn bindgen_test_layout_LiveDataPacket() {
    assert_eq!(
        ::std::mem::size_of::<LiveDataPacket>(),
        2828usize,
        concat!("Size of: ", stringify!(LiveDataPacket))
    );
    assert_eq!(
        ::std::mem::align_of::<LiveDataPacket>(),
        4usize,
        concat!("Alignment of ", stringify!(LiveDataPacket))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LiveDataPacket>())).GameCars as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(LiveDataPacket),
            "::",
            stringify!(GameCars)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LiveDataPacket>())).NumCars as *const _ as usize },
        2200usize,
        concat!(
            "Offset of field: ",
            stringify!(LiveDataPacket),
            "::",
            stringify!(NumCars)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LiveDataPacket>())).GameBoosts as *const _ as usize },
        2204usize,
        concat!(
            "Offset of field: ",
            stringify!(LiveDataPacket),
            "::",
            stringify!(GameBoosts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LiveDataPacket>())).NumBoosts as *const _ as usize },
        2604usize,
        concat!(
            "Offset of field: ",
            stringify!(LiveDataPacket),
            "::",
            stringify!(NumBoosts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LiveDataPacket>())).GameBall as *const _ as usize },
        2608usize,
        concat!(
            "Offset of field: ",
            stringify!(LiveDataPacket),
            "::",
            stringify!(GameBall)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<LiveDataPacket>())).GameInfo as *const _ as usize },
        2812usize,
        concat!(
            "Offset of field: ",
            stringify!(LiveDataPacket),
            "::",
            stringify!(GameInfo)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GoalInfo {
    pub TeamNum: ::std::os::raw::c_uchar,
    pub Location: PyStruct_Vector3,
    pub Direction: PyStruct_Vector3,
}
#[test]
fn bindgen_test_layout_GoalInfo() {
    assert_eq!(
        ::std::mem::size_of::<GoalInfo>(),
        28usize,
        concat!("Size of: ", stringify!(GoalInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<GoalInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(GoalInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GoalInfo>())).TeamNum as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GoalInfo),
            "::",
            stringify!(TeamNum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GoalInfo>())).Location as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GoalInfo),
            "::",
            stringify!(Location)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GoalInfo>())).Direction as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GoalInfo),
            "::",
            stringify!(Direction)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BoostPad {
    pub Location: PyStruct_Vector3,
    pub FullBoost: bool,
}
#[test]
fn bindgen_test_layout_BoostPad() {
    assert_eq!(
        ::std::mem::size_of::<BoostPad>(),
        16usize,
        concat!("Size of: ", stringify!(BoostPad))
    );
    assert_eq!(
        ::std::mem::align_of::<BoostPad>(),
        4usize,
        concat!("Alignment of ", stringify!(BoostPad))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BoostPad>())).Location as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BoostPad),
            "::",
            stringify!(Location)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BoostPad>())).FullBoost as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(BoostPad),
            "::",
            stringify!(FullBoost)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct FieldInfo {
    pub BoostPads: [BoostPad; 50usize],
    pub NumBoosts: ::std::os::raw::c_int,
    pub Goals: [GoalInfo; 2usize],
    pub NumGoals: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_FieldInfo() {
    assert_eq!(
        ::std::mem::size_of::<FieldInfo>(),
        864usize,
        concat!("Size of: ", stringify!(FieldInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<FieldInfo>(),
        4usize,
        concat!("Alignment of ", stringify!(FieldInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FieldInfo>())).BoostPads as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FieldInfo),
            "::",
            stringify!(BoostPads)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FieldInfo>())).NumBoosts as *const _ as usize },
        800usize,
        concat!(
            "Offset of field: ",
            stringify!(FieldInfo),
            "::",
            stringify!(NumBoosts)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FieldInfo>())).Goals as *const _ as usize },
        804usize,
        concat!(
            "Offset of field: ",
            stringify!(FieldInfo),
            "::",
            stringify!(Goals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<FieldInfo>())).NumGoals as *const _ as usize },
        860usize,
        concat!(
            "Offset of field: ",
            stringify!(FieldInfo),
            "::",
            stringify!(NumGoals)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PlayerConfiguration {
    pub Bot: bool,
    pub RLBotControlled: bool,
    pub BotSkill: f32,
    pub HumanIndex: ::std::os::raw::c_int,
    pub Name: [u16; 32usize],
    pub Team: ::std::os::raw::c_uchar,
    pub TeamColorID: ::std::os::raw::c_uchar,
    pub CustomColorID: ::std::os::raw::c_uchar,
    pub CarID: ::std::os::raw::c_int,
    pub DecalID: ::std::os::raw::c_int,
    pub WheelsID: ::std::os::raw::c_int,
    pub BoostID: ::std::os::raw::c_int,
    pub AntennaID: ::std::os::raw::c_int,
    pub HatID: ::std::os::raw::c_int,
    pub PaintFinishID: ::std::os::raw::c_int,
    pub CustomFinishID: ::std::os::raw::c_int,
    pub EngineAudioID: ::std::os::raw::c_int,
    pub TrailsID: ::std::os::raw::c_int,
    pub GoalExplosionID: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_PlayerConfiguration() {
    assert_eq!(
        ::std::mem::size_of::<PlayerConfiguration>(),
        188usize,
        concat!("Size of: ", stringify!(PlayerConfiguration))
    );
    assert_eq!(
        ::std::mem::align_of::<PlayerConfiguration>(),
        4usize,
        concat!("Alignment of ", stringify!(PlayerConfiguration))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlayerConfiguration>())).Bot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PlayerConfiguration),
            "::",
            stringify!(Bot)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PlayerConfiguration>())).RLBotControlled as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(PlayerConfiguration),
            "::",
            stringify!(RLBotControlled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlayerConfiguration>())).BotSkill as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PlayerConfiguration),
            "::",
            stringify!(BotSkill)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlayerConfiguration>())).HumanIndex as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PlayerConfiguration),
            "::",
            stringify!(HumanIndex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlayerConfiguration>())).Name as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(PlayerConfiguration),
            "::",
            stringify!(Name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlayerConfiguration>())).Team as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(PlayerConfiguration),
            "::",
            stringify!(Team)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlayerConfiguration>())).TeamColorID as *const _ as usize },
        141usize,
        concat!(
            "Offset of field: ",
            stringify!(PlayerConfiguration),
            "::",
            stringify!(TeamColorID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PlayerConfiguration>())).CustomColorID as *const _ as usize
        },
        142usize,
        concat!(
            "Offset of field: ",
            stringify!(PlayerConfiguration),
            "::",
            stringify!(CustomColorID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlayerConfiguration>())).CarID as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(PlayerConfiguration),
            "::",
            stringify!(CarID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlayerConfiguration>())).DecalID as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(PlayerConfiguration),
            "::",
            stringify!(DecalID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlayerConfiguration>())).WheelsID as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(PlayerConfiguration),
            "::",
            stringify!(WheelsID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlayerConfiguration>())).BoostID as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(PlayerConfiguration),
            "::",
            stringify!(BoostID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlayerConfiguration>())).AntennaID as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(PlayerConfiguration),
            "::",
            stringify!(AntennaID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlayerConfiguration>())).HatID as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(PlayerConfiguration),
            "::",
            stringify!(HatID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PlayerConfiguration>())).PaintFinishID as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(PlayerConfiguration),
            "::",
            stringify!(PaintFinishID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PlayerConfiguration>())).CustomFinishID as *const _ as usize
        },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(PlayerConfiguration),
            "::",
            stringify!(CustomFinishID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PlayerConfiguration>())).EngineAudioID as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(PlayerConfiguration),
            "::",
            stringify!(EngineAudioID)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlayerConfiguration>())).TrailsID as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(PlayerConfiguration),
            "::",
            stringify!(TrailsID)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PlayerConfiguration>())).GoalExplosionID as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(PlayerConfiguration),
            "::",
            stringify!(GoalExplosionID)
        )
    );
}
pub const GameMode_Soccer: GameMode = 0;
pub const GameMode_Hoops: GameMode = 1;
pub const GameMode_Dropshot: GameMode = 2;
pub const GameMode_Hockey: GameMode = 3;
pub const GameMode_Rumble: GameMode = 4;
pub type GameMode = u32;
pub const GameMap_DFHStadium: GameMap = 0;
pub const GameMap_Mannfield: GameMap = 1;
pub const GameMap_ChampionsField: GameMap = 2;
pub const GameMap_UrbanCentral: GameMap = 3;
pub const GameMap_BeckwithPark: GameMap = 4;
pub const GameMap_UtopiaColiseum: GameMap = 5;
pub const GameMap_Wasteland: GameMap = 6;
pub const GameMap_NeoTokyo: GameMap = 7;
pub const GameMap_AquaDome: GameMap = 8;
pub const GameMap_StarbaseArc: GameMap = 9;
pub const GameMap_Farmstead: GameMap = 10;
pub const GameMap_DFHStadium_Stormy: GameMap = 11;
pub const GameMap_DFHStadium_Day: GameMap = 12;
pub const GameMap_Mannfield_Stormy: GameMap = 13;
pub const GameMap_Mannfield_Night: GameMap = 14;
pub const GameMap_ChampionsField_Day: GameMap = 15;
pub const GameMap_BeckwithPark_Stormy: GameMap = 16;
pub const GameMap_BeckwithPark_Midnight: GameMap = 17;
pub const GameMap_UrbanCentral_Night: GameMap = 18;
pub const GameMap_UrbanCentral_Dawn: GameMap = 19;
pub const GameMap_UtopiaColiseum_Dusk: GameMap = 20;
pub const GameMap_DFHStadium_Snowy: GameMap = 21;
pub const GameMap_Mannfield_Snowy: GameMap = 22;
pub const GameMap_UtopiaColiseum_Snowy: GameMap = 23;
pub const GameMap_Badlands: GameMap = 24;
pub const GameMap_Badlands_Night: GameMap = 25;
pub const GameMap_TokyoUnderpass: GameMap = 26;
pub const GameMap_Arctagon: GameMap = 27;
pub const GameMap_Pillars: GameMap = 28;
pub const GameMap_Cosmic: GameMap = 29;
pub const GameMap_DoubleGoal: GameMap = 30;
pub const GameMap_Octagon: GameMap = 31;
pub const GameMap_Underpass: GameMap = 32;
pub const GameMap_UtopiaRetro: GameMap = 33;
pub const GameMap_Hoops_DunkHouse: GameMap = 34;
pub const GameMap_DropShot_Core707: GameMap = 35;
pub const GameMap_Workshop_Aerial_Map: GameMap = 36;
pub const GameMap_Workshop_BeachVolley: GameMap = 37;
pub const GameMap_Workshop_DribblingChallenge2: GameMap = 38;
pub const GameMap_Workshop_DribblingChallenge: GameMap = 39;
pub const GameMap_Workshop_ObstacleCourse2: GameMap = 40;
pub const GameMap_Workshop_ObstacleCourse: GameMap = 41;
pub const GameMap_Workshop_ShipYarr: GameMap = 42;
pub type GameMap = u32;
pub const MatchLength_Five_Minutes: MatchLength = 0;
pub const MatchLength_Ten_Minutes: MatchLength = 1;
pub const MatchLength_Twenty_Minutes: MatchLength = 2;
pub const MatchLength_Unlimited: MatchLength = 3;
pub type MatchLength = u32;
pub const BoostOption_Normal_Boost: BoostOption = 0;
pub const BoostOption_Unlimited_Boost: BoostOption = 1;
pub const BoostOption_Slow_Recharge: BoostOption = 2;
pub const BoostOption_Rapid_Recharge: BoostOption = 3;
pub const BoostOption_No_Boost: BoostOption = 4;
pub type BoostOption = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MutatorSettings {
    pub MatchLength: MatchLength,
    pub BoostOptions: BoostOption,
}
#[test]
fn bindgen_test_layout_MutatorSettings() {
    assert_eq!(
        ::std::mem::size_of::<MutatorSettings>(),
        8usize,
        concat!("Size of: ", stringify!(MutatorSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<MutatorSettings>(),
        4usize,
        concat!("Alignment of ", stringify!(MutatorSettings))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MutatorSettings>())).MatchLength as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MutatorSettings),
            "::",
            stringify!(MatchLength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MutatorSettings>())).BoostOptions as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MutatorSettings),
            "::",
            stringify!(BoostOptions)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MatchSettings {
    pub PlayerConfiguration: [PlayerConfiguration; 10usize],
    pub NumPlayers: ::std::os::raw::c_int,
    pub GameMode: GameMode,
    pub GameMap: GameMap,
    pub SkipReplays: bool,
    pub InstantStart: bool,
    pub MutatorSettings: MutatorSettings,
}
#[test]
fn bindgen_test_layout_MatchSettings() {
    assert_eq!(
        ::std::mem::size_of::<MatchSettings>(),
        1904usize,
        concat!("Size of: ", stringify!(MatchSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<MatchSettings>(),
        4usize,
        concat!("Alignment of ", stringify!(MatchSettings))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MatchSettings>())).PlayerConfiguration as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MatchSettings),
            "::",
            stringify!(PlayerConfiguration)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MatchSettings>())).NumPlayers as *const _ as usize },
        1880usize,
        concat!(
            "Offset of field: ",
            stringify!(MatchSettings),
            "::",
            stringify!(NumPlayers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MatchSettings>())).GameMode as *const _ as usize },
        1884usize,
        concat!(
            "Offset of field: ",
            stringify!(MatchSettings),
            "::",
            stringify!(GameMode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MatchSettings>())).GameMap as *const _ as usize },
        1888usize,
        concat!(
            "Offset of field: ",
            stringify!(MatchSettings),
            "::",
            stringify!(GameMap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MatchSettings>())).SkipReplays as *const _ as usize },
        1892usize,
        concat!(
            "Offset of field: ",
            stringify!(MatchSettings),
            "::",
            stringify!(SkipReplays)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MatchSettings>())).InstantStart as *const _ as usize },
        1893usize,
        concat!(
            "Offset of field: ",
            stringify!(MatchSettings),
            "::",
            stringify!(InstantStart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MatchSettings>())).MutatorSettings as *const _ as usize },
        1896usize,
        concat!(
            "Offset of field: ",
            stringify!(MatchSettings),
            "::",
            stringify!(MutatorSettings)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PlayerInput {
    pub Throttle: f32,
    pub Steer: f32,
    pub Pitch: f32,
    pub Yaw: f32,
    pub Roll: f32,
    pub Jump: bool,
    pub Boost: bool,
    pub Handbrake: bool,
}
#[test]
fn bindgen_test_layout_PlayerInput() {
    assert_eq!(
        ::std::mem::size_of::<PlayerInput>(),
        24usize,
        concat!("Size of: ", stringify!(PlayerInput))
    );
    assert_eq!(
        ::std::mem::align_of::<PlayerInput>(),
        4usize,
        concat!("Alignment of ", stringify!(PlayerInput))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlayerInput>())).Throttle as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PlayerInput),
            "::",
            stringify!(Throttle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlayerInput>())).Steer as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PlayerInput),
            "::",
            stringify!(Steer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlayerInput>())).Pitch as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PlayerInput),
            "::",
            stringify!(Pitch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlayerInput>())).Yaw as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(PlayerInput),
            "::",
            stringify!(Yaw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlayerInput>())).Roll as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PlayerInput),
            "::",
            stringify!(Roll)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlayerInput>())).Jump as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(PlayerInput),
            "::",
            stringify!(Jump)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlayerInput>())).Boost as *const _ as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(PlayerInput),
            "::",
            stringify!(Boost)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PlayerInput>())).Handbrake as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(PlayerInput),
            "::",
            stringify!(Handbrake)
        )
    );
}
